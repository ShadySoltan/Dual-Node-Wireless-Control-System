
AVR_NODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000594  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000594  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014f7  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e4  00000000  00000000  00001c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f4  00000000  00000000  0000257f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00002d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008c3  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a5b  00000000  00000000  000037b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004212  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  7a:	0c 94 c8 02 	jmp	0x590	; 0x590 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MCU_INIT>:
 *  Author: Administrator
 */ 
#include "MAIN_APP.h"

void MCU_INIT(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <MCU_INIT+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <MCU_INIT+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	DIO_Init(); //Initialize DIO Pins of Slave MCU
  8e:	0e 94 c6 01 	call	0x38c	; 0x38c <DIO_Init>
	SPI_ConfigTypes SPI_options = {Slave,MSB,SPIClock_64,DoupleSpeedDisable}; //Slave SPI Config Options
  92:	19 82       	std	Y+1, r1	; 0x01
  94:	1a 82       	std	Y+2, r1	; 0x02
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8b 83       	std	Y+3, r24	; 0x03
  9a:	1c 82       	std	Y+4, r1	; 0x04
	SPI_Init(&SPI_options); //Initialize Slave SPI
  9c:	ce 01       	movw	r24, r28
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_Init>
	DIO_WriteChannel(DIO_ChannelA1,STD_High);	
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 81 00 	call	0x102	; 0x102 <DIO_WriteChannel>
}
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <MAIN_APP>:

void MAIN_APP(void)
{
		u8 Received_From_Master = STD_Low;
		
		Received_From_Master = SPI_TxRx(Ack);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 c3 02 	call	0x586	; 0x586 <SPI_TxRx>
		
		switch(Received_From_Master)
  c0:	84 30       	cpi	r24, 0x04	; 4
  c2:	69 f0       	breq	.+26     	; 0xde <MAIN_APP+0x24>
  c4:	18 f4       	brcc	.+6      	; 0xcc <MAIN_APP+0x12>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	31 f0       	breq	.+12     	; 0xd6 <MAIN_APP+0x1c>
  ca:	08 95       	ret
  cc:	85 30       	cpi	r24, 0x05	; 5
  ce:	59 f0       	breq	.+22     	; 0xe6 <MAIN_APP+0x2c>
  d0:	86 30       	cpi	r24, 0x06	; 6
  d2:	69 f0       	breq	.+26     	; 0xee <MAIN_APP+0x34>
  d4:	08 95       	ret
		{
			case Led0:
			DIO_ToggleChannel(DIO_ChannelD3);
  d6:	8b e1       	ldi	r24, 0x1B	; 27
  d8:	0e 94 03 01 	call	0x206	; 0x206 <DIO_ToggleChannel>
			break;
  dc:	08 95       	ret
			
			case Led1:
			DIO_ToggleChannel(DIO_ChannelC2);
  de:	82 e1       	ldi	r24, 0x12	; 18
  e0:	0e 94 03 01 	call	0x206	; 0x206 <DIO_ToggleChannel>
			break;
  e4:	08 95       	ret
			
			case Led2:
			DIO_ToggleChannel(DIO_ChannelC7);
  e6:	87 e1       	ldi	r24, 0x17	; 23
  e8:	0e 94 03 01 	call	0x206	; 0x206 <DIO_ToggleChannel>
			break;
  ec:	08 95       	ret
			
			case Air_Cond:
			DIO_ToggleChannel(DIO_ChannelA0);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 03 01 	call	0x206	; 0x206 <DIO_ToggleChannel>
			DIO_ToggleChannel(DIO_ChannelA1);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 03 01 	call	0x206	; 0x206 <DIO_ToggleChannel>
			DIO_ToggleChannel(DIO_ChannelA2);
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 03 01 	call	0x206	; 0x206 <DIO_ToggleChannel>
 100:	08 95       	ret

00000102 <DIO_WriteChannel>:
		case DIO_PortD:
		BitValue = GetBit(PIND_Reg,BitNo);
		break;
	}
	return BitValue;
}
 102:	98 2f       	mov	r25, r24
 104:	96 95       	lsr	r25
 106:	96 95       	lsr	r25
 108:	96 95       	lsr	r25
 10a:	87 70       	andi	r24, 0x07	; 7
 10c:	91 30       	cpi	r25, 0x01	; 1
 10e:	21 f1       	breq	.+72     	; 0x158 <DIO_WriteChannel+0x56>
 110:	30 f0       	brcs	.+12     	; 0x11e <DIO_WriteChannel+0x1c>
 112:	92 30       	cpi	r25, 0x02	; 2
 114:	f1 f1       	breq	.+124    	; 0x192 <DIO_WriteChannel+0x90>
 116:	93 30       	cpi	r25, 0x03	; 3
 118:	09 f4       	brne	.+2      	; 0x11c <DIO_WriteChannel+0x1a>
 11a:	58 c0       	rjmp	.+176    	; 0x1cc <DIO_WriteChannel+0xca>
 11c:	08 95       	ret
 11e:	61 30       	cpi	r22, 0x01	; 1
 120:	69 f4       	brne	.+26     	; 0x13c <DIO_WriteChannel+0x3a>
 122:	4b b3       	in	r20, 0x1b	; 27
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	b9 01       	movw	r22, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_WriteChannel+0x2e>
 12c:	66 0f       	add	r22, r22
 12e:	77 1f       	adc	r23, r23
 130:	8a 95       	dec	r24
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_WriteChannel+0x2a>
 134:	cb 01       	movw	r24, r22
 136:	84 2b       	or	r24, r20
 138:	8b bb       	out	0x1b, r24	; 27
 13a:	08 95       	ret
 13c:	4b b3       	in	r20, 0x1b	; 27
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	b9 01       	movw	r22, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_WriteChannel+0x48>
 146:	66 0f       	add	r22, r22
 148:	77 1f       	adc	r23, r23
 14a:	8a 95       	dec	r24
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_WriteChannel+0x44>
 14e:	cb 01       	movw	r24, r22
 150:	80 95       	com	r24
 152:	84 23       	and	r24, r20
 154:	8b bb       	out	0x1b, r24	; 27
 156:	08 95       	ret
 158:	61 30       	cpi	r22, 0x01	; 1
 15a:	69 f4       	brne	.+26     	; 0x176 <DIO_WriteChannel+0x74>
 15c:	48 b3       	in	r20, 0x18	; 24
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	b9 01       	movw	r22, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_WriteChannel+0x68>
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	8a 95       	dec	r24
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_WriteChannel+0x64>
 16e:	cb 01       	movw	r24, r22
 170:	84 2b       	or	r24, r20
 172:	88 bb       	out	0x18, r24	; 24
 174:	08 95       	ret
 176:	48 b3       	in	r20, 0x18	; 24
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_WriteChannel+0x82>
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	8a 95       	dec	r24
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_WriteChannel+0x7e>
 188:	cb 01       	movw	r24, r22
 18a:	80 95       	com	r24
 18c:	84 23       	and	r24, r20
 18e:	88 bb       	out	0x18, r24	; 24
 190:	08 95       	ret
 192:	61 30       	cpi	r22, 0x01	; 1
 194:	69 f4       	brne	.+26     	; 0x1b0 <DIO_WriteChannel+0xae>
 196:	45 b3       	in	r20, 0x15	; 21
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	b9 01       	movw	r22, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_WriteChannel+0xa2>
 1a0:	66 0f       	add	r22, r22
 1a2:	77 1f       	adc	r23, r23
 1a4:	8a 95       	dec	r24
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_WriteChannel+0x9e>
 1a8:	cb 01       	movw	r24, r22
 1aa:	84 2b       	or	r24, r20
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	08 95       	ret
 1b0:	45 b3       	in	r20, 0x15	; 21
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	b9 01       	movw	r22, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_WriteChannel+0xbc>
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	8a 95       	dec	r24
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_WriteChannel+0xb8>
 1c2:	cb 01       	movw	r24, r22
 1c4:	80 95       	com	r24
 1c6:	84 23       	and	r24, r20
 1c8:	85 bb       	out	0x15, r24	; 21
 1ca:	08 95       	ret
 1cc:	61 30       	cpi	r22, 0x01	; 1
 1ce:	69 f4       	brne	.+26     	; 0x1ea <DIO_WriteChannel+0xe8>
 1d0:	42 b3       	in	r20, 0x12	; 18
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_WriteChannel+0xdc>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	8a 95       	dec	r24
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_WriteChannel+0xd8>
 1e2:	cb 01       	movw	r24, r22
 1e4:	84 2b       	or	r24, r20
 1e6:	82 bb       	out	0x12, r24	; 18
 1e8:	08 95       	ret
 1ea:	42 b3       	in	r20, 0x12	; 18
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	b9 01       	movw	r22, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_WriteChannel+0xf6>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_WriteChannel+0xf2>
 1fc:	cb 01       	movw	r24, r22
 1fe:	80 95       	com	r24
 200:	84 23       	and	r24, r20
 202:	82 bb       	out	0x12, r24	; 18
 204:	08 95       	ret

00000206 <DIO_ToggleChannel>:
void DIO_ToggleChannel(DIO_ChannelTypes channelId){
	DIO_PortTypes Portx = channelId/8;
 206:	98 2f       	mov	r25, r24
 208:	96 95       	lsr	r25
 20a:	96 95       	lsr	r25
 20c:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = channelId%8;
 20e:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
 210:	91 30       	cpi	r25, 0x01	; 1
 212:	99 f0       	breq	.+38     	; 0x23a <DIO_ToggleChannel+0x34>
 214:	28 f0       	brcs	.+10     	; 0x220 <DIO_ToggleChannel+0x1a>
 216:	92 30       	cpi	r25, 0x02	; 2
 218:	e9 f0       	breq	.+58     	; 0x254 <DIO_ToggleChannel+0x4e>
 21a:	93 30       	cpi	r25, 0x03	; 3
 21c:	41 f1       	breq	.+80     	; 0x26e <DIO_ToggleChannel+0x68>
 21e:	08 95       	ret
		case DIO_PortA:
		ToggleBit(PORTA_Reg,BitNo);
 220:	4b b3       	in	r20, 0x1b	; 27
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_ToggleChannel+0x28>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	8a 95       	dec	r24
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_ToggleChannel+0x24>
 232:	cb 01       	movw	r24, r22
 234:	84 27       	eor	r24, r20
 236:	8b bb       	out	0x1b, r24	; 27
		break;
 238:	08 95       	ret
		case DIO_PortB:
		ToggleBit(PORTB_Reg,BitNo);
 23a:	48 b3       	in	r20, 0x18	; 24
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_ToggleChannel+0x42>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	8a 95       	dec	r24
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_ToggleChannel+0x3e>
 24c:	cb 01       	movw	r24, r22
 24e:	84 27       	eor	r24, r20
 250:	88 bb       	out	0x18, r24	; 24
		break;
 252:	08 95       	ret
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
 254:	45 b3       	in	r20, 0x15	; 21
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_ToggleChannel+0x5c>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_ToggleChannel+0x58>
 266:	cb 01       	movw	r24, r22
 268:	84 27       	eor	r24, r20
 26a:	85 bb       	out	0x15, r24	; 21
		break;
 26c:	08 95       	ret
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
 26e:	42 b3       	in	r20, 0x12	; 18
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_ToggleChannel+0x76>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	8a 95       	dec	r24
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_ToggleChannel+0x72>
 280:	cb 01       	movw	r24, r22
 282:	84 27       	eor	r24, r20
 284:	82 bb       	out	0x12, r24	; 18
 286:	08 95       	ret

00000288 <DIO_ConfigChannel>:
		break;
	}
}
void DIO_ConfigChannel(DIO_ChannelTypes channelId,DIO_DataDir direction){
	DIO_PortTypes Portx = channelId/8;
 288:	98 2f       	mov	r25, r24
 28a:	96 95       	lsr	r25
 28c:	96 95       	lsr	r25
 28e:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = channelId%8;
 290:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
 292:	91 30       	cpi	r25, 0x01	; 1
 294:	21 f1       	breq	.+72     	; 0x2de <DIO_ConfigChannel+0x56>
 296:	30 f0       	brcs	.+12     	; 0x2a4 <DIO_ConfigChannel+0x1c>
 298:	92 30       	cpi	r25, 0x02	; 2
 29a:	f1 f1       	breq	.+124    	; 0x318 <DIO_ConfigChannel+0x90>
 29c:	93 30       	cpi	r25, 0x03	; 3
 29e:	09 f4       	brne	.+2      	; 0x2a2 <DIO_ConfigChannel+0x1a>
 2a0:	58 c0       	rjmp	.+176    	; 0x352 <DIO_ConfigChannel+0xca>
 2a2:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
 2a4:	61 30       	cpi	r22, 0x01	; 1
 2a6:	69 f4       	brne	.+26     	; 0x2c2 <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
 2a8:	4a b3       	in	r20, 0x1a	; 26
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	b9 01       	movw	r22, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_ConfigChannel+0x2e>
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	8a 95       	dec	r24
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_ConfigChannel+0x2a>
 2ba:	cb 01       	movw	r24, r22
 2bc:	84 2b       	or	r24, r20
 2be:	8a bb       	out	0x1a, r24	; 26
 2c0:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
 2c2:	4a b3       	in	r20, 0x1a	; 26
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_ConfigChannel+0x48>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_ConfigChannel+0x44>
 2d4:	cb 01       	movw	r24, r22
 2d6:	80 95       	com	r24
 2d8:	84 23       	and	r24, r20
 2da:	8a bb       	out	0x1a, r24	; 26
 2dc:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (direction == Output)
 2de:	61 30       	cpi	r22, 0x01	; 1
 2e0:	69 f4       	brne	.+26     	; 0x2fc <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
 2e2:	47 b3       	in	r20, 0x17	; 23
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	b9 01       	movw	r22, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_ConfigChannel+0x68>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	8a 95       	dec	r24
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_ConfigChannel+0x64>
 2f4:	cb 01       	movw	r24, r22
 2f6:	84 2b       	or	r24, r20
 2f8:	87 bb       	out	0x17, r24	; 23
 2fa:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
 2fc:	47 b3       	in	r20, 0x17	; 23
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	b9 01       	movw	r22, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_ConfigChannel+0x82>
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	8a 95       	dec	r24
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_ConfigChannel+0x7e>
 30e:	cb 01       	movw	r24, r22
 310:	80 95       	com	r24
 312:	84 23       	and	r24, r20
 314:	87 bb       	out	0x17, r24	; 23
 316:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (direction == Output)
 318:	61 30       	cpi	r22, 0x01	; 1
 31a:	69 f4       	brne	.+26     	; 0x336 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
 31c:	44 b3       	in	r20, 0x14	; 20
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	b9 01       	movw	r22, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_ConfigChannel+0xa2>
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	8a 95       	dec	r24
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_ConfigChannel+0x9e>
 32e:	cb 01       	movw	r24, r22
 330:	84 2b       	or	r24, r20
 332:	84 bb       	out	0x14, r24	; 20
 334:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
 336:	44 b3       	in	r20, 0x14	; 20
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_ConfigChannel+0xbc>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_ConfigChannel+0xb8>
 348:	cb 01       	movw	r24, r22
 34a:	80 95       	com	r24
 34c:	84 23       	and	r24, r20
 34e:	84 bb       	out	0x14, r24	; 20
 350:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (direction == Output)
 352:	61 30       	cpi	r22, 0x01	; 1
 354:	69 f4       	brne	.+26     	; 0x370 <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
 356:	41 b3       	in	r20, 0x11	; 17
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	b9 01       	movw	r22, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_ConfigChannel+0xdc>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	8a 95       	dec	r24
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_ConfigChannel+0xd8>
 368:	cb 01       	movw	r24, r22
 36a:	84 2b       	or	r24, r20
 36c:	81 bb       	out	0x11, r24	; 17
 36e:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
 370:	41 b3       	in	r20, 0x11	; 17
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_ConfigChannel+0xf6>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	8a 95       	dec	r24
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_ConfigChannel+0xf2>
 382:	cb 01       	movw	r24, r22
 384:	80 95       	com	r24
 386:	84 23       	and	r24, r20
 388:	81 bb       	out	0x11, r24	; 17
 38a:	08 95       	ret

0000038c <DIO_Init>:

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	a0 c0       	rjmp	.+320    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
	{
		Portx = count/8;
 390:	98 2f       	mov	r25, r24
 392:	96 95       	lsr	r25
 394:	96 95       	lsr	r25
 396:	96 95       	lsr	r25
		BitNo = count%8;
 398:	28 2f       	mov	r18, r24
 39a:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 39c:	91 30       	cpi	r25, 0x01	; 1
 39e:	61 f1       	breq	.+88     	; 0x3f8 <DIO_Init+0x6c>
 3a0:	38 f0       	brcs	.+14     	; 0x3b0 <DIO_Init+0x24>
 3a2:	92 30       	cpi	r25, 0x02	; 2
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <DIO_Init+0x1c>
 3a6:	4c c0       	rjmp	.+152    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3a8:	93 30       	cpi	r25, 0x03	; 3
 3aa:	09 f4       	brne	.+2      	; 0x3ae <DIO_Init+0x22>
 3ac:	6d c0       	rjmp	.+218    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 3ae:	8f c0       	rjmp	.+286    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
 3b0:	e8 2f       	mov	r30, r24
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	ee 0f       	add	r30, r30
 3b6:	ff 1f       	adc	r31, r31
 3b8:	e0 5a       	subi	r30, 0xA0	; 160
 3ba:	ff 4f       	sbci	r31, 0xFF	; 255
 3bc:	90 81       	ld	r25, Z
 3be:	91 30       	cpi	r25, 0x01	; 1
 3c0:	69 f4       	brne	.+26     	; 0x3dc <DIO_Init+0x50>
			{
				SetBit(DDRA_Reg,BitNo);
 3c2:	9a b3       	in	r25, 0x1a	; 26
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	ba 01       	movw	r22, r20
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_Init+0x44>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	2a 95       	dec	r18
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_Init+0x40>
 3d4:	9b 01       	movw	r18, r22
 3d6:	29 2b       	or	r18, r25
 3d8:	2a bb       	out	0x1a, r18	; 26
 3da:	79 c0       	rjmp	.+242    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
 3dc:	9a b3       	in	r25, 0x1a	; 26
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	ba 01       	movw	r22, r20
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_Init+0x5e>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	2a 95       	dec	r18
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_Init+0x5a>
 3ee:	9b 01       	movw	r18, r22
 3f0:	20 95       	com	r18
 3f2:	29 23       	and	r18, r25
 3f4:	2a bb       	out	0x1a, r18	; 26
 3f6:	6b c0       	rjmp	.+214    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
 3f8:	e8 2f       	mov	r30, r24
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	ee 0f       	add	r30, r30
 3fe:	ff 1f       	adc	r31, r31
 400:	e0 5a       	subi	r30, 0xA0	; 160
 402:	ff 4f       	sbci	r31, 0xFF	; 255
 404:	90 81       	ld	r25, Z
 406:	91 30       	cpi	r25, 0x01	; 1
 408:	69 f4       	brne	.+26     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			{
				SetBit(DDRB_Reg,BitNo);
 40a:	97 b3       	in	r25, 0x17	; 23
 40c:	41 e0       	ldi	r20, 0x01	; 1
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	ba 01       	movw	r22, r20
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	2a 95       	dec	r18
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	9b 01       	movw	r18, r22
 41e:	29 2b       	or	r18, r25
 420:	27 bb       	out	0x17, r18	; 23
 422:	55 c0       	rjmp	.+170    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 424:	97 b3       	in	r25, 0x17	; 23
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	ba 01       	movw	r22, r20
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	2a 95       	dec	r18
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	9b 01       	movw	r18, r22
 438:	20 95       	com	r18
 43a:	29 23       	and	r18, r25
 43c:	27 bb       	out	0x17, r18	; 23
 43e:	47 c0       	rjmp	.+142    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
 440:	e8 2f       	mov	r30, r24
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	ee 0f       	add	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	e0 5a       	subi	r30, 0xA0	; 160
 44a:	ff 4f       	sbci	r31, 0xFF	; 255
 44c:	90 81       	ld	r25, Z
 44e:	91 30       	cpi	r25, 0x01	; 1
 450:	69 f4       	brne	.+26     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			{
				SetBit(DDRC_Reg,BitNo);
 452:	94 b3       	in	r25, 0x14	; 20
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	ba 01       	movw	r22, r20
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	2a 95       	dec	r18
 462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	9b 01       	movw	r18, r22
 466:	29 2b       	or	r18, r25
 468:	24 bb       	out	0x14, r18	; 20
 46a:	31 c0       	rjmp	.+98     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
 46c:	94 b3       	in	r25, 0x14	; 20
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	ba 01       	movw	r22, r20
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	2a 95       	dec	r18
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	9b 01       	movw	r18, r22
 480:	20 95       	com	r18
 482:	29 23       	and	r18, r25
 484:	24 bb       	out	0x14, r18	; 20
 486:	23 c0       	rjmp	.+70     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
 488:	e8 2f       	mov	r30, r24
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	ee 0f       	add	r30, r30
 48e:	ff 1f       	adc	r31, r31
 490:	e0 5a       	subi	r30, 0xA0	; 160
 492:	ff 4f       	sbci	r31, 0xFF	; 255
 494:	90 81       	ld	r25, Z
 496:	91 30       	cpi	r25, 0x01	; 1
 498:	69 f4       	brne	.+26     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
			{
				SetBit(DDRD_Reg,BitNo);
 49a:	91 b3       	in	r25, 0x11	; 17
 49c:	41 e0       	ldi	r20, 0x01	; 1
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	ba 01       	movw	r22, r20
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	2a 95       	dec	r18
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4ac:	9b 01       	movw	r18, r22
 4ae:	29 2b       	or	r18, r25
 4b0:	21 bb       	out	0x11, r18	; 17
 4b2:	0d c0       	rjmp	.+26     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
 4b4:	91 b3       	in	r25, 0x11	; 17
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	ba 01       	movw	r22, r20
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4be:	66 0f       	add	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	2a 95       	dec	r18
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4c6:	9b 01       	movw	r18, r22
 4c8:	20 95       	com	r18
 4ca:	29 23       	and	r18, r25
 4cc:	21 bb       	out	0x11, r18	; 17

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 32       	cpi	r24, 0x20	; 32
 4d2:	08 f4       	brcc	.+2      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d4:	5d cf       	rjmp	.-326    	; 0x390 <DIO_Init+0x4>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
 4d6:	08 95       	ret

000004d8 <main>:

#include "MAIN_APP.h"

int main(void)
{
	MCU_INIT();
 4d8:	0e 94 41 00 	call	0x82	; 0x82 <MCU_INIT>
    while (1) 
    {
		MAIN_APP();
 4dc:	0e 94 5d 00 	call	0xba	; 0xba <MAIN_APP>
 4e0:	fd cf       	rjmp	.-6      	; 0x4dc <main+0x4>

000004e2 <SPI_Init>:
*  Author: user
*/
#include "SPI.h"


void SPI_Init(SPI_ConfigTypes * options){
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	ec 01       	movw	r28, r24
	switch(options->stateMode){
 4e8:	88 81       	ld	r24, Y
 4ea:	88 23       	and	r24, r24
 4ec:	c9 f0       	breq	.+50     	; 0x520 <SPI_Init+0x3e>
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	69 f5       	brne	.+90     	; 0x54c <SPI_Init+0x6a>
		case Master:
		DIO_ConfigChannel(SPI_SSPin,Output);
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	8c e0       	ldi	r24, 0x0C	; 12
 4f6:	0e 94 44 01 	call	0x288	; 0x288 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Output);
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	8d e0       	ldi	r24, 0x0D	; 13
 4fe:	0e 94 44 01 	call	0x288	; 0x288 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Input);
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	8e e0       	ldi	r24, 0x0E	; 14
 506:	0e 94 44 01 	call	0x288	; 0x288 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Output);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	8f e0       	ldi	r24, 0x0F	; 15
 50e:	0e 94 44 01 	call	0x288	; 0x288 <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 1;
 512:	8d b1       	in	r24, 0x0d	; 13
 514:	80 61       	ori	r24, 0x10	; 16
 516:	8d b9       	out	0x0d, r24	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
 518:	8d b1       	in	r24, 0x0d	; 13
 51a:	80 64       	ori	r24, 0x40	; 64
 51c:	8d b9       	out	0x0d, r24	; 13
		break;
 51e:	16 c0       	rjmp	.+44     	; 0x54c <SPI_Init+0x6a>
		case Slave:
		DIO_ConfigChannel(SPI_SSPin,Input);
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	8c e0       	ldi	r24, 0x0C	; 12
 524:	0e 94 44 01 	call	0x288	; 0x288 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Input);
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	8d e0       	ldi	r24, 0x0D	; 13
 52c:	0e 94 44 01 	call	0x288	; 0x288 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Output);
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	8e e0       	ldi	r24, 0x0E	; 14
 534:	0e 94 44 01 	call	0x288	; 0x288 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Input);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	8f e0       	ldi	r24, 0x0F	; 15
 53c:	0e 94 44 01 	call	0x288	; 0x288 <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 0;
 540:	8d b1       	in	r24, 0x0d	; 13
 542:	8f 7e       	andi	r24, 0xEF	; 239
 544:	8d b9       	out	0x0d, r24	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
 546:	8d b1       	in	r24, 0x0d	; 13
 548:	80 64       	ori	r24, 0x40	; 64
 54a:	8d b9       	out	0x0d, r24	; 13
		break;
	}
	SPI->SPCR_Reg.AllRegister |= (options->dataOrderMode<<5);
 54c:	2d b1       	in	r18, 0x0d	; 13
 54e:	99 81       	ldd	r25, Y+1	; 0x01
 550:	30 e2       	ldi	r19, 0x20	; 32
 552:	93 9f       	mul	r25, r19
 554:	c0 01       	movw	r24, r0
 556:	11 24       	eor	r1, r1
 558:	82 2b       	or	r24, r18
 55a:	8d b9       	out	0x0d, r24	; 13
	if (options->doubleSpeedMode == DoupleSpeedEnable)
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	81 30       	cpi	r24, 0x01	; 1
 560:	41 f4       	brne	.+16     	; 0x572 <SPI_Init+0x90>
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 1;
 562:	8e b1       	in	r24, 0x0e	; 14
 564:	81 60       	ori	r24, 0x01	; 1
 566:	8e b9       	out	0x0e, r24	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
 568:	9d b1       	in	r25, 0x0d	; 13
 56a:	8a 81       	ldd	r24, Y+2	; 0x02
 56c:	89 2b       	or	r24, r25
 56e:	8d b9       	out	0x0d, r24	; 13
 570:	07 c0       	rjmp	.+14     	; 0x580 <SPI_Init+0x9e>
	}
	else
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 0;
 572:	8e b1       	in	r24, 0x0e	; 14
 574:	8e 7f       	andi	r24, 0xFE	; 254
 576:	8e b9       	out	0x0e, r24	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
 578:	9d b1       	in	r25, 0x0d	; 13
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	89 2b       	or	r24, r25
 57e:	8d b9       	out	0x0d, r24	; 13
	}
}
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	08 95       	ret

00000586 <SPI_TxRx>:
u8 SPI_TxRx(u8 data){
	SPI->SPDR_Reg = data;
 586:	8f b9       	out	0x0f, r24	; 15
	while(SPI->SPSR_Reg.Bits.SPIF_Bit == 0);
 588:	77 9b       	sbis	0x0e, 7	; 14
 58a:	fe cf       	rjmp	.-4      	; 0x588 <SPI_TxRx+0x2>
	return SPI->SPDR_Reg;
 58c:	8f b1       	in	r24, 0x0f	; 15
}
 58e:	08 95       	ret

00000590 <_exit>:
 590:	f8 94       	cli

00000592 <__stop_program>:
 592:	ff cf       	rjmp	.-2      	; 0x592 <__stop_program>
