
AVR_NODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000488  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000488  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014d2  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e4  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ee  00000000  00000000  0000244e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008c3  00000000  00000000  00002dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a5b  00000000  00000000  0000367f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000040da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  7a:	0c 94 42 02 	jmp	0x484	; 0x484 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MCU_INIT>:
 *  Author: Administrator
 */ 
#include "MAIN_APP.h"

void MCU_INIT(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <MCU_INIT+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <MCU_INIT+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	DIO_Init(); //Initialize DIO Pins of Slave MCU
  8e:	0e 94 40 01 	call	0x280	; 0x280 <DIO_Init>
	SPI_ConfigTypes SPI_options = {Slave,MSB,SPIClock_64,DoupleSpeedDisable}; //Slave SPI Config Options
  92:	19 82       	std	Y+1, r1	; 0x01
  94:	1a 82       	std	Y+2, r1	; 0x02
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8b 83       	std	Y+3, r24	; 0x03
  9a:	1c 82       	std	Y+4, r1	; 0x04
	SPI_Init(&SPI_options); //Initialize Slave SPI	
  9c:	ce 01       	movw	r24, r28
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <SPI_Init>
}
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	0f 90       	pop	r0
  aa:	0f 90       	pop	r0
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <MAIN_APP>:

void MAIN_APP(void)
{
		u8 Received_From_Master = STD_Low;
		
		Received_From_Master = SPI_TxRx(Ack);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 3d 02 	call	0x47a	; 0x47a <SPI_TxRx>
		
		switch(Received_From_Master)
  b8:	84 30       	cpi	r24, 0x04	; 4
  ba:	69 f0       	breq	.+26     	; 0xd6 <MAIN_APP+0x24>
  bc:	18 f4       	brcc	.+6      	; 0xc4 <MAIN_APP+0x12>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	31 f0       	breq	.+12     	; 0xce <MAIN_APP+0x1c>
  c2:	08 95       	ret
  c4:	85 30       	cpi	r24, 0x05	; 5
  c6:	59 f0       	breq	.+22     	; 0xde <MAIN_APP+0x2c>
  c8:	86 30       	cpi	r24, 0x06	; 6
  ca:	69 f0       	breq	.+26     	; 0xe6 <MAIN_APP+0x34>
  cc:	08 95       	ret
		{
			case Led0:
			DIO_ToggleChannel(DIO_ChannelD3);
  ce:	8b e1       	ldi	r24, 0x1B	; 27
  d0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_ToggleChannel>
			break;
  d4:	08 95       	ret
			
			case Led1:
			DIO_ToggleChannel(DIO_ChannelC2);
  d6:	82 e1       	ldi	r24, 0x12	; 18
  d8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_ToggleChannel>
			break;
  dc:	08 95       	ret
			
			case Led2:
			DIO_ToggleChannel(DIO_ChannelC7);
  de:	87 e1       	ldi	r24, 0x17	; 23
  e0:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_ToggleChannel>
			break;
  e4:	08 95       	ret
			
			case Air_Cond:
			DIO_ToggleChannel(DIO_ChannelA0);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_ToggleChannel>
			DIO_ToggleChannel(DIO_ChannelA1);
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_ToggleChannel>
			DIO_ToggleChannel(DIO_ChannelA2);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 7d 00 	call	0xfa	; 0xfa <DIO_ToggleChannel>
  f8:	08 95       	ret

000000fa <DIO_ToggleChannel>:
		break;
	}
	return BitValue;
}
void DIO_ToggleChannel(DIO_ChannelTypes channelId){
	DIO_PortTypes Portx = channelId/8;
  fa:	98 2f       	mov	r25, r24
  fc:	96 95       	lsr	r25
  fe:	96 95       	lsr	r25
 100:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = channelId%8;
 102:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
 104:	91 30       	cpi	r25, 0x01	; 1
 106:	99 f0       	breq	.+38     	; 0x12e <DIO_ToggleChannel+0x34>
 108:	28 f0       	brcs	.+10     	; 0x114 <DIO_ToggleChannel+0x1a>
 10a:	92 30       	cpi	r25, 0x02	; 2
 10c:	e9 f0       	breq	.+58     	; 0x148 <DIO_ToggleChannel+0x4e>
 10e:	93 30       	cpi	r25, 0x03	; 3
 110:	41 f1       	breq	.+80     	; 0x162 <DIO_ToggleChannel+0x68>
 112:	08 95       	ret
		case DIO_PortA:
		ToggleBit(PORTA_Reg,BitNo);
 114:	4b b3       	in	r20, 0x1b	; 27
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	b9 01       	movw	r22, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_ToggleChannel+0x28>
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	8a 95       	dec	r24
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_ToggleChannel+0x24>
 126:	cb 01       	movw	r24, r22
 128:	84 27       	eor	r24, r20
 12a:	8b bb       	out	0x1b, r24	; 27
		break;
 12c:	08 95       	ret
		case DIO_PortB:
		ToggleBit(PORTB_Reg,BitNo);
 12e:	48 b3       	in	r20, 0x18	; 24
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_ToggleChannel+0x42>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	8a 95       	dec	r24
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_ToggleChannel+0x3e>
 140:	cb 01       	movw	r24, r22
 142:	84 27       	eor	r24, r20
 144:	88 bb       	out	0x18, r24	; 24
		break;
 146:	08 95       	ret
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
 148:	45 b3       	in	r20, 0x15	; 21
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_ToggleChannel+0x5c>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_ToggleChannel+0x58>
 15a:	cb 01       	movw	r24, r22
 15c:	84 27       	eor	r24, r20
 15e:	85 bb       	out	0x15, r24	; 21
		break;
 160:	08 95       	ret
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
 162:	42 b3       	in	r20, 0x12	; 18
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	b9 01       	movw	r22, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_ToggleChannel+0x76>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	8a 95       	dec	r24
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_ToggleChannel+0x72>
 174:	cb 01       	movw	r24, r22
 176:	84 27       	eor	r24, r20
 178:	82 bb       	out	0x12, r24	; 18
 17a:	08 95       	ret

0000017c <DIO_ConfigChannel>:
		break;
	}
}
void DIO_ConfigChannel(DIO_ChannelTypes channelId,DIO_DataDir direction){
	DIO_PortTypes Portx = channelId/8;
 17c:	98 2f       	mov	r25, r24
 17e:	96 95       	lsr	r25
 180:	96 95       	lsr	r25
 182:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = channelId%8;
 184:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
 186:	91 30       	cpi	r25, 0x01	; 1
 188:	21 f1       	breq	.+72     	; 0x1d2 <DIO_ConfigChannel+0x56>
 18a:	30 f0       	brcs	.+12     	; 0x198 <DIO_ConfigChannel+0x1c>
 18c:	92 30       	cpi	r25, 0x02	; 2
 18e:	f1 f1       	breq	.+124    	; 0x20c <DIO_ConfigChannel+0x90>
 190:	93 30       	cpi	r25, 0x03	; 3
 192:	09 f4       	brne	.+2      	; 0x196 <DIO_ConfigChannel+0x1a>
 194:	58 c0       	rjmp	.+176    	; 0x246 <DIO_ConfigChannel+0xca>
 196:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
 198:	61 30       	cpi	r22, 0x01	; 1
 19a:	69 f4       	brne	.+26     	; 0x1b6 <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
 19c:	4a b3       	in	r20, 0x1a	; 26
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	b9 01       	movw	r22, r18
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_ConfigChannel+0x2e>
 1a6:	66 0f       	add	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	8a 95       	dec	r24
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_ConfigChannel+0x2a>
 1ae:	cb 01       	movw	r24, r22
 1b0:	84 2b       	or	r24, r20
 1b2:	8a bb       	out	0x1a, r24	; 26
 1b4:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
 1b6:	4a b3       	in	r20, 0x1a	; 26
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	b9 01       	movw	r22, r18
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_ConfigChannel+0x48>
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	8a 95       	dec	r24
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_ConfigChannel+0x44>
 1c8:	cb 01       	movw	r24, r22
 1ca:	80 95       	com	r24
 1cc:	84 23       	and	r24, r20
 1ce:	8a bb       	out	0x1a, r24	; 26
 1d0:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (direction == Output)
 1d2:	61 30       	cpi	r22, 0x01	; 1
 1d4:	69 f4       	brne	.+26     	; 0x1f0 <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
 1d6:	47 b3       	in	r20, 0x17	; 23
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_ConfigChannel+0x68>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	8a 95       	dec	r24
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_ConfigChannel+0x64>
 1e8:	cb 01       	movw	r24, r22
 1ea:	84 2b       	or	r24, r20
 1ec:	87 bb       	out	0x17, r24	; 23
 1ee:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
 1f0:	47 b3       	in	r20, 0x17	; 23
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	b9 01       	movw	r22, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_ConfigChannel+0x82>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	8a 95       	dec	r24
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_ConfigChannel+0x7e>
 202:	cb 01       	movw	r24, r22
 204:	80 95       	com	r24
 206:	84 23       	and	r24, r20
 208:	87 bb       	out	0x17, r24	; 23
 20a:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (direction == Output)
 20c:	61 30       	cpi	r22, 0x01	; 1
 20e:	69 f4       	brne	.+26     	; 0x22a <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
 210:	44 b3       	in	r20, 0x14	; 20
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	b9 01       	movw	r22, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_ConfigChannel+0xa2>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	8a 95       	dec	r24
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_ConfigChannel+0x9e>
 222:	cb 01       	movw	r24, r22
 224:	84 2b       	or	r24, r20
 226:	84 bb       	out	0x14, r24	; 20
 228:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
 22a:	44 b3       	in	r20, 0x14	; 20
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_ConfigChannel+0xbc>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_ConfigChannel+0xb8>
 23c:	cb 01       	movw	r24, r22
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	84 bb       	out	0x14, r24	; 20
 244:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (direction == Output)
 246:	61 30       	cpi	r22, 0x01	; 1
 248:	69 f4       	brne	.+26     	; 0x264 <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
 24a:	41 b3       	in	r20, 0x11	; 17
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_ConfigChannel+0xdc>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_ConfigChannel+0xd8>
 25c:	cb 01       	movw	r24, r22
 25e:	84 2b       	or	r24, r20
 260:	81 bb       	out	0x11, r24	; 17
 262:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
 264:	41 b3       	in	r20, 0x11	; 17
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	b9 01       	movw	r22, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_ConfigChannel+0xf6>
 26e:	66 0f       	add	r22, r22
 270:	77 1f       	adc	r23, r23
 272:	8a 95       	dec	r24
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_ConfigChannel+0xf2>
 276:	cb 01       	movw	r24, r22
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	81 bb       	out	0x11, r24	; 17
 27e:	08 95       	ret

00000280 <DIO_Init>:

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	a0 c0       	rjmp	.+320    	; 0x3c4 <DIO_Init+0x144>
	{
		Portx = count/8;
 284:	98 2f       	mov	r25, r24
 286:	96 95       	lsr	r25
 288:	96 95       	lsr	r25
 28a:	96 95       	lsr	r25
		BitNo = count%8;
 28c:	28 2f       	mov	r18, r24
 28e:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 290:	91 30       	cpi	r25, 0x01	; 1
 292:	61 f1       	breq	.+88     	; 0x2ec <DIO_Init+0x6c>
 294:	38 f0       	brcs	.+14     	; 0x2a4 <DIO_Init+0x24>
 296:	92 30       	cpi	r25, 0x02	; 2
 298:	09 f4       	brne	.+2      	; 0x29c <DIO_Init+0x1c>
 29a:	4c c0       	rjmp	.+152    	; 0x334 <DIO_Init+0xb4>
 29c:	93 30       	cpi	r25, 0x03	; 3
 29e:	09 f4       	brne	.+2      	; 0x2a2 <DIO_Init+0x22>
 2a0:	6d c0       	rjmp	.+218    	; 0x37c <DIO_Init+0xfc>
 2a2:	8f c0       	rjmp	.+286    	; 0x3c2 <DIO_Init+0x142>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
 2a4:	e8 2f       	mov	r30, r24
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	e0 5a       	subi	r30, 0xA0	; 160
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	90 81       	ld	r25, Z
 2b2:	91 30       	cpi	r25, 0x01	; 1
 2b4:	69 f4       	brne	.+26     	; 0x2d0 <DIO_Init+0x50>
			{
				SetBit(DDRA_Reg,BitNo);
 2b6:	9a b3       	in	r25, 0x1a	; 26
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	ba 01       	movw	r22, r20
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_Init+0x44>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	2a 95       	dec	r18
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_Init+0x40>
 2c8:	9b 01       	movw	r18, r22
 2ca:	29 2b       	or	r18, r25
 2cc:	2a bb       	out	0x1a, r18	; 26
 2ce:	79 c0       	rjmp	.+242    	; 0x3c2 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
 2d0:	9a b3       	in	r25, 0x1a	; 26
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	ba 01       	movw	r22, r20
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_Init+0x5e>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	2a 95       	dec	r18
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_Init+0x5a>
 2e2:	9b 01       	movw	r18, r22
 2e4:	20 95       	com	r18
 2e6:	29 23       	and	r18, r25
 2e8:	2a bb       	out	0x1a, r18	; 26
 2ea:	6b c0       	rjmp	.+214    	; 0x3c2 <DIO_Init+0x142>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
 2ec:	e8 2f       	mov	r30, r24
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	ee 0f       	add	r30, r30
 2f2:	ff 1f       	adc	r31, r31
 2f4:	e0 5a       	subi	r30, 0xA0	; 160
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	90 81       	ld	r25, Z
 2fa:	91 30       	cpi	r25, 0x01	; 1
 2fc:	69 f4       	brne	.+26     	; 0x318 <DIO_Init+0x98>
			{
				SetBit(DDRB_Reg,BitNo);
 2fe:	97 b3       	in	r25, 0x17	; 23
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	ba 01       	movw	r22, r20
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_Init+0x8c>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	2a 95       	dec	r18
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_Init+0x88>
 310:	9b 01       	movw	r18, r22
 312:	29 2b       	or	r18, r25
 314:	27 bb       	out	0x17, r18	; 23
 316:	55 c0       	rjmp	.+170    	; 0x3c2 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 318:	97 b3       	in	r25, 0x17	; 23
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	ba 01       	movw	r22, r20
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_Init+0xa6>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_Init+0xa2>
 32a:	9b 01       	movw	r18, r22
 32c:	20 95       	com	r18
 32e:	29 23       	and	r18, r25
 330:	27 bb       	out	0x17, r18	; 23
 332:	47 c0       	rjmp	.+142    	; 0x3c2 <DIO_Init+0x142>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
 334:	e8 2f       	mov	r30, r24
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	e0 5a       	subi	r30, 0xA0	; 160
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	90 81       	ld	r25, Z
 342:	91 30       	cpi	r25, 0x01	; 1
 344:	69 f4       	brne	.+26     	; 0x360 <DIO_Init+0xe0>
			{
				SetBit(DDRC_Reg,BitNo);
 346:	94 b3       	in	r25, 0x14	; 20
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	ba 01       	movw	r22, r20
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_Init+0xd4>
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	2a 95       	dec	r18
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_Init+0xd0>
 358:	9b 01       	movw	r18, r22
 35a:	29 2b       	or	r18, r25
 35c:	24 bb       	out	0x14, r18	; 20
 35e:	31 c0       	rjmp	.+98     	; 0x3c2 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
 360:	94 b3       	in	r25, 0x14	; 20
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	ba 01       	movw	r22, r20
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_Init+0xee>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	2a 95       	dec	r18
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_Init+0xea>
 372:	9b 01       	movw	r18, r22
 374:	20 95       	com	r18
 376:	29 23       	and	r18, r25
 378:	24 bb       	out	0x14, r18	; 20
 37a:	23 c0       	rjmp	.+70     	; 0x3c2 <DIO_Init+0x142>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
 37c:	e8 2f       	mov	r30, r24
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	ee 0f       	add	r30, r30
 382:	ff 1f       	adc	r31, r31
 384:	e0 5a       	subi	r30, 0xA0	; 160
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	90 81       	ld	r25, Z
 38a:	91 30       	cpi	r25, 0x01	; 1
 38c:	69 f4       	brne	.+26     	; 0x3a8 <DIO_Init+0x128>
			{
				SetBit(DDRD_Reg,BitNo);
 38e:	91 b3       	in	r25, 0x11	; 17
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	ba 01       	movw	r22, r20
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_Init+0x11c>
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	2a 95       	dec	r18
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_Init+0x118>
 3a0:	9b 01       	movw	r18, r22
 3a2:	29 2b       	or	r18, r25
 3a4:	21 bb       	out	0x11, r18	; 17
 3a6:	0d c0       	rjmp	.+26     	; 0x3c2 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
 3a8:	91 b3       	in	r25, 0x11	; 17
 3aa:	41 e0       	ldi	r20, 0x01	; 1
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	ba 01       	movw	r22, r20
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_Init+0x136>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	2a 95       	dec	r18
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_Init+0x132>
 3ba:	9b 01       	movw	r18, r22
 3bc:	20 95       	com	r18
 3be:	29 23       	and	r18, r25
 3c0:	21 bb       	out	0x11, r18	; 17

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 32       	cpi	r24, 0x20	; 32
 3c6:	08 f4       	brcc	.+2      	; 0x3ca <DIO_Init+0x14a>
 3c8:	5d cf       	rjmp	.-326    	; 0x284 <DIO_Init+0x4>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
 3ca:	08 95       	ret

000003cc <main>:

#include "MAIN_APP.h"

int main(void)
{
	MCU_INIT();
 3cc:	0e 94 41 00 	call	0x82	; 0x82 <MCU_INIT>
    while (1) 
    {
		MAIN_APP();
 3d0:	0e 94 59 00 	call	0xb2	; 0xb2 <MAIN_APP>
 3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <main+0x4>

000003d6 <SPI_Init>:
*  Author: user
*/
#include "SPI.h"


void SPI_Init(SPI_ConfigTypes * options){
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ec 01       	movw	r28, r24
	switch(options->stateMode){
 3dc:	88 81       	ld	r24, Y
 3de:	88 23       	and	r24, r24
 3e0:	c9 f0       	breq	.+50     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	69 f5       	brne	.+90     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		case Master:
		DIO_ConfigChannel(SPI_SSPin,Output);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	8c e0       	ldi	r24, 0x0C	; 12
 3ea:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Output);
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	8d e0       	ldi	r24, 0x0D	; 13
 3f2:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Input);
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	8e e0       	ldi	r24, 0x0E	; 14
 3fa:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Output);
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	8f e0       	ldi	r24, 0x0F	; 15
 402:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 1;
 406:	8d b1       	in	r24, 0x0d	; 13
 408:	80 61       	ori	r24, 0x10	; 16
 40a:	8d b9       	out	0x0d, r24	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
 40c:	8d b1       	in	r24, 0x0d	; 13
 40e:	80 64       	ori	r24, 0x40	; 64
 410:	8d b9       	out	0x0d, r24	; 13
		break;
 412:	16 c0       	rjmp	.+44     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		case Slave:
		DIO_ConfigChannel(SPI_SSPin,Input);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	8c e0       	ldi	r24, 0x0C	; 12
 418:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Input);
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	8d e0       	ldi	r24, 0x0D	; 13
 420:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Output);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	8e e0       	ldi	r24, 0x0E	; 14
 428:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Input);
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	8f e0       	ldi	r24, 0x0F	; 15
 430:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 0;
 434:	8d b1       	in	r24, 0x0d	; 13
 436:	8f 7e       	andi	r24, 0xEF	; 239
 438:	8d b9       	out	0x0d, r24	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
 43a:	8d b1       	in	r24, 0x0d	; 13
 43c:	80 64       	ori	r24, 0x40	; 64
 43e:	8d b9       	out	0x0d, r24	; 13
		break;
	}
	SPI->SPCR_Reg.AllRegister |= (options->dataOrderMode<<5);
 440:	2d b1       	in	r18, 0x0d	; 13
 442:	99 81       	ldd	r25, Y+1	; 0x01
 444:	30 e2       	ldi	r19, 0x20	; 32
 446:	93 9f       	mul	r25, r19
 448:	c0 01       	movw	r24, r0
 44a:	11 24       	eor	r1, r1
 44c:	82 2b       	or	r24, r18
 44e:	8d b9       	out	0x0d, r24	; 13
	if (options->doubleSpeedMode == DoupleSpeedEnable)
 450:	8b 81       	ldd	r24, Y+3	; 0x03
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	41 f4       	brne	.+16     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 1;
 456:	8e b1       	in	r24, 0x0e	; 14
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	8e b9       	out	0x0e, r24	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
 45c:	9d b1       	in	r25, 0x0d	; 13
 45e:	8a 81       	ldd	r24, Y+2	; 0x02
 460:	89 2b       	or	r24, r25
 462:	8d b9       	out	0x0d, r24	; 13
 464:	07 c0       	rjmp	.+14     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	}
	else
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 0;
 466:	8e b1       	in	r24, 0x0e	; 14
 468:	8e 7f       	andi	r24, 0xFE	; 254
 46a:	8e b9       	out	0x0e, r24	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
 46c:	9d b1       	in	r25, 0x0d	; 13
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	89 2b       	or	r24, r25
 472:	8d b9       	out	0x0d, r24	; 13
	}
}
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <SPI_TxRx>:
u8 SPI_TxRx(u8 data){
	SPI->SPDR_Reg = data;
 47a:	8f b9       	out	0x0f, r24	; 15
	while(SPI->SPSR_Reg.Bits.SPIF_Bit == 0);
 47c:	77 9b       	sbis	0x0e, 7	; 14
 47e:	fe cf       	rjmp	.-4      	; 0x47c <SPI_TxRx+0x2>
	return SPI->SPDR_Reg;
 480:	8f b1       	in	r24, 0x0f	; 15
}
 482:	08 95       	ret

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>
