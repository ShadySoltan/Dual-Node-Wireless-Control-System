
AVR_NODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000003c6  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001386  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d7  00000000  00000000  0000195e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000079a  00000000  00000000  00002235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000029d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008c3  00000000  00000000  00002b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a2f  00000000  00000000  00003413  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003e42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  7a:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <MCU_INIT>:
 *  Author: Administrator
 */ 
#include "MAIN_APP.h"

void MCU_INIT(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <MCU_INIT+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <MCU_INIT+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	DIO_Init(); //Initialize DIO Pins of Slave MCU
  8e:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_Init>
	SPI_ConfigTypes SPI_options = {Slave,MSB,SPIClock_64,DoupleSpeedDisable}; //Slave SPI Config Options
  92:	19 82       	std	Y+1, r1	; 0x01
  94:	1a 82       	std	Y+2, r1	; 0x02
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8b 83       	std	Y+3, r24	; 0x03
  9a:	1c 82       	std	Y+4, r1	; 0x04
	SPI_Init(&SPI_options); //Initialize Slave SPI	
  9c:	ce 01       	movw	r24, r28
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	0e 94 8a 01 	call	0x314	; 0x314 <SPI_Init>
}
  a4:	0f 90       	pop	r0
  a6:	0f 90       	pop	r0
  a8:	0f 90       	pop	r0
  aa:	0f 90       	pop	r0
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <MAIN_APP>:

void MAIN_APP(void)
{
		u8 Received_From_Master = STD_Low;
		
		Received_From_Master = SPI_TxRx(Ack);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <SPI_TxRx>
  b8:	08 95       	ret

000000ba <DIO_ConfigChannel>:
		ToggleBit(PORTD_Reg,BitNo);
		break;
	}
}
void DIO_ConfigChannel(DIO_ChannelTypes channelId,DIO_DataDir direction){
	DIO_PortTypes Portx = channelId/8;
  ba:	98 2f       	mov	r25, r24
  bc:	96 95       	lsr	r25
  be:	96 95       	lsr	r25
  c0:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = channelId%8;
  c2:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
  c4:	91 30       	cpi	r25, 0x01	; 1
  c6:	21 f1       	breq	.+72     	; 0x110 <DIO_ConfigChannel+0x56>
  c8:	30 f0       	brcs	.+12     	; 0xd6 <DIO_ConfigChannel+0x1c>
  ca:	92 30       	cpi	r25, 0x02	; 2
  cc:	f1 f1       	breq	.+124    	; 0x14a <DIO_ConfigChannel+0x90>
  ce:	93 30       	cpi	r25, 0x03	; 3
  d0:	09 f4       	brne	.+2      	; 0xd4 <DIO_ConfigChannel+0x1a>
  d2:	58 c0       	rjmp	.+176    	; 0x184 <DIO_ConfigChannel+0xca>
  d4:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
  d6:	61 30       	cpi	r22, 0x01	; 1
  d8:	69 f4       	brne	.+26     	; 0xf4 <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
  da:	4a b3       	in	r20, 0x1a	; 26
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	b9 01       	movw	r22, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_ConfigChannel+0x2e>
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	8a 95       	dec	r24
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_ConfigChannel+0x2a>
  ec:	cb 01       	movw	r24, r22
  ee:	84 2b       	or	r24, r20
  f0:	8a bb       	out	0x1a, r24	; 26
  f2:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
  f4:	4a b3       	in	r20, 0x1a	; 26
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	b9 01       	movw	r22, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_ConfigChannel+0x48>
  fe:	66 0f       	add	r22, r22
 100:	77 1f       	adc	r23, r23
 102:	8a 95       	dec	r24
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_ConfigChannel+0x44>
 106:	cb 01       	movw	r24, r22
 108:	80 95       	com	r24
 10a:	84 23       	and	r24, r20
 10c:	8a bb       	out	0x1a, r24	; 26
 10e:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (direction == Output)
 110:	61 30       	cpi	r22, 0x01	; 1
 112:	69 f4       	brne	.+26     	; 0x12e <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
 114:	47 b3       	in	r20, 0x17	; 23
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	b9 01       	movw	r22, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_ConfigChannel+0x68>
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	8a 95       	dec	r24
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_ConfigChannel+0x64>
 126:	cb 01       	movw	r24, r22
 128:	84 2b       	or	r24, r20
 12a:	87 bb       	out	0x17, r24	; 23
 12c:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
 12e:	47 b3       	in	r20, 0x17	; 23
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_ConfigChannel+0x82>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	8a 95       	dec	r24
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_ConfigChannel+0x7e>
 140:	cb 01       	movw	r24, r22
 142:	80 95       	com	r24
 144:	84 23       	and	r24, r20
 146:	87 bb       	out	0x17, r24	; 23
 148:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (direction == Output)
 14a:	61 30       	cpi	r22, 0x01	; 1
 14c:	69 f4       	brne	.+26     	; 0x168 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
 14e:	44 b3       	in	r20, 0x14	; 20
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_ConfigChannel+0xa2>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	8a 95       	dec	r24
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_ConfigChannel+0x9e>
 160:	cb 01       	movw	r24, r22
 162:	84 2b       	or	r24, r20
 164:	84 bb       	out	0x14, r24	; 20
 166:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
 168:	44 b3       	in	r20, 0x14	; 20
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_ConfigChannel+0xbc>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_ConfigChannel+0xb8>
 17a:	cb 01       	movw	r24, r22
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	84 bb       	out	0x14, r24	; 20
 182:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (direction == Output)
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	69 f4       	brne	.+26     	; 0x1a2 <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
 188:	41 b3       	in	r20, 0x11	; 17
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_ConfigChannel+0xdc>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	8a 95       	dec	r24
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_ConfigChannel+0xd8>
 19a:	cb 01       	movw	r24, r22
 19c:	84 2b       	or	r24, r20
 19e:	81 bb       	out	0x11, r24	; 17
 1a0:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
 1a2:	41 b3       	in	r20, 0x11	; 17
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_ConfigChannel+0xf6>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_ConfigChannel+0xf2>
 1b4:	cb 01       	movw	r24, r22
 1b6:	80 95       	com	r24
 1b8:	84 23       	and	r24, r20
 1ba:	81 bb       	out	0x11, r24	; 17
 1bc:	08 95       	ret

000001be <DIO_Init>:

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	a0 c0       	rjmp	.+320    	; 0x302 <DIO_Init+0x144>
	{
		Portx = count/8;
 1c2:	98 2f       	mov	r25, r24
 1c4:	96 95       	lsr	r25
 1c6:	96 95       	lsr	r25
 1c8:	96 95       	lsr	r25
		BitNo = count%8;
 1ca:	28 2f       	mov	r18, r24
 1cc:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 1ce:	91 30       	cpi	r25, 0x01	; 1
 1d0:	61 f1       	breq	.+88     	; 0x22a <DIO_Init+0x6c>
 1d2:	38 f0       	brcs	.+14     	; 0x1e2 <DIO_Init+0x24>
 1d4:	92 30       	cpi	r25, 0x02	; 2
 1d6:	09 f4       	brne	.+2      	; 0x1da <DIO_Init+0x1c>
 1d8:	4c c0       	rjmp	.+152    	; 0x272 <DIO_Init+0xb4>
 1da:	93 30       	cpi	r25, 0x03	; 3
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <DIO_Init+0x22>
 1de:	6d c0       	rjmp	.+218    	; 0x2ba <DIO_Init+0xfc>
 1e0:	8f c0       	rjmp	.+286    	; 0x300 <DIO_Init+0x142>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
 1e2:	e8 2f       	mov	r30, r24
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	e0 5a       	subi	r30, 0xA0	; 160
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	90 81       	ld	r25, Z
 1f0:	91 30       	cpi	r25, 0x01	; 1
 1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_Init+0x50>
			{
				SetBit(DDRA_Reg,BitNo);
 1f4:	9a b3       	in	r25, 0x1a	; 26
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	ba 01       	movw	r22, r20
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_Init+0x44>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_Init+0x40>
 206:	9b 01       	movw	r18, r22
 208:	29 2b       	or	r18, r25
 20a:	2a bb       	out	0x1a, r18	; 26
 20c:	79 c0       	rjmp	.+242    	; 0x300 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
 20e:	9a b3       	in	r25, 0x1a	; 26
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	ba 01       	movw	r22, r20
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_Init+0x5e>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	2a 95       	dec	r18
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_Init+0x5a>
 220:	9b 01       	movw	r18, r22
 222:	20 95       	com	r18
 224:	29 23       	and	r18, r25
 226:	2a bb       	out	0x1a, r18	; 26
 228:	6b c0       	rjmp	.+214    	; 0x300 <DIO_Init+0x142>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
 22a:	e8 2f       	mov	r30, r24
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	e0 5a       	subi	r30, 0xA0	; 160
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	90 81       	ld	r25, Z
 238:	91 30       	cpi	r25, 0x01	; 1
 23a:	69 f4       	brne	.+26     	; 0x256 <DIO_Init+0x98>
			{
				SetBit(DDRB_Reg,BitNo);
 23c:	97 b3       	in	r25, 0x17	; 23
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	ba 01       	movw	r22, r20
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_Init+0x8c>
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	2a 95       	dec	r18
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_Init+0x88>
 24e:	9b 01       	movw	r18, r22
 250:	29 2b       	or	r18, r25
 252:	27 bb       	out	0x17, r18	; 23
 254:	55 c0       	rjmp	.+170    	; 0x300 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 256:	97 b3       	in	r25, 0x17	; 23
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	ba 01       	movw	r22, r20
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_Init+0xa6>
 260:	66 0f       	add	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	2a 95       	dec	r18
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_Init+0xa2>
 268:	9b 01       	movw	r18, r22
 26a:	20 95       	com	r18
 26c:	29 23       	and	r18, r25
 26e:	27 bb       	out	0x17, r18	; 23
 270:	47 c0       	rjmp	.+142    	; 0x300 <DIO_Init+0x142>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
 272:	e8 2f       	mov	r30, r24
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	e0 5a       	subi	r30, 0xA0	; 160
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	90 81       	ld	r25, Z
 280:	91 30       	cpi	r25, 0x01	; 1
 282:	69 f4       	brne	.+26     	; 0x29e <DIO_Init+0xe0>
			{
				SetBit(DDRC_Reg,BitNo);
 284:	94 b3       	in	r25, 0x14	; 20
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	ba 01       	movw	r22, r20
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_Init+0xd4>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	2a 95       	dec	r18
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_Init+0xd0>
 296:	9b 01       	movw	r18, r22
 298:	29 2b       	or	r18, r25
 29a:	24 bb       	out	0x14, r18	; 20
 29c:	31 c0       	rjmp	.+98     	; 0x300 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
 29e:	94 b3       	in	r25, 0x14	; 20
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	ba 01       	movw	r22, r20
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_Init+0xee>
 2a8:	66 0f       	add	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	2a 95       	dec	r18
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_Init+0xea>
 2b0:	9b 01       	movw	r18, r22
 2b2:	20 95       	com	r18
 2b4:	29 23       	and	r18, r25
 2b6:	24 bb       	out	0x14, r18	; 20
 2b8:	23 c0       	rjmp	.+70     	; 0x300 <DIO_Init+0x142>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
 2ba:	e8 2f       	mov	r30, r24
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e0 5a       	subi	r30, 0xA0	; 160
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	90 81       	ld	r25, Z
 2c8:	91 30       	cpi	r25, 0x01	; 1
 2ca:	69 f4       	brne	.+26     	; 0x2e6 <DIO_Init+0x128>
			{
				SetBit(DDRD_Reg,BitNo);
 2cc:	91 b3       	in	r25, 0x11	; 17
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	ba 01       	movw	r22, r20
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_Init+0x11c>
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	2a 95       	dec	r18
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_Init+0x118>
 2de:	9b 01       	movw	r18, r22
 2e0:	29 2b       	or	r18, r25
 2e2:	21 bb       	out	0x11, r18	; 17
 2e4:	0d c0       	rjmp	.+26     	; 0x300 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
 2e6:	91 b3       	in	r25, 0x11	; 17
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	ba 01       	movw	r22, r20
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_Init+0x136>
 2f0:	66 0f       	add	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	2a 95       	dec	r18
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_Init+0x132>
 2f8:	9b 01       	movw	r18, r22
 2fa:	20 95       	com	r18
 2fc:	29 23       	and	r18, r25
 2fe:	21 bb       	out	0x11, r18	; 17

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 32       	cpi	r24, 0x20	; 32
 304:	08 f4       	brcc	.+2      	; 0x308 <DIO_Init+0x14a>
 306:	5d cf       	rjmp	.-326    	; 0x1c2 <DIO_Init+0x4>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
 308:	08 95       	ret

0000030a <main>:

#include "MAIN_APP.h"

int main(void)
{
	MCU_INIT();
 30a:	0e 94 41 00 	call	0x82	; 0x82 <MCU_INIT>
    while (1) 
    {
		MAIN_APP();
 30e:	0e 94 59 00 	call	0xb2	; 0xb2 <MAIN_APP>
 312:	fd cf       	rjmp	.-6      	; 0x30e <main+0x4>

00000314 <SPI_Init>:
*  Author: user
*/
#include "SPI.h"


void SPI_Init(SPI_ConfigTypes * options){
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
	switch(options->stateMode){
 31a:	88 81       	ld	r24, Y
 31c:	88 23       	and	r24, r24
 31e:	c9 f0       	breq	.+50     	; 0x352 <SPI_Init+0x3e>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	69 f5       	brne	.+90     	; 0x37e <SPI_Init+0x6a>
		case Master:
		DIO_ConfigChannel(SPI_SSPin,Output);
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	0e 94 5d 00 	call	0xba	; 0xba <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Output);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	8d e0       	ldi	r24, 0x0D	; 13
 330:	0e 94 5d 00 	call	0xba	; 0xba <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Input);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	8e e0       	ldi	r24, 0x0E	; 14
 338:	0e 94 5d 00 	call	0xba	; 0xba <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Output);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	0e 94 5d 00 	call	0xba	; 0xba <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 1;
 344:	8d b1       	in	r24, 0x0d	; 13
 346:	80 61       	ori	r24, 0x10	; 16
 348:	8d b9       	out	0x0d, r24	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
 34a:	8d b1       	in	r24, 0x0d	; 13
 34c:	80 64       	ori	r24, 0x40	; 64
 34e:	8d b9       	out	0x0d, r24	; 13
		break;
 350:	16 c0       	rjmp	.+44     	; 0x37e <SPI_Init+0x6a>
		case Slave:
		DIO_ConfigChannel(SPI_SSPin,Input);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	8c e0       	ldi	r24, 0x0C	; 12
 356:	0e 94 5d 00 	call	0xba	; 0xba <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Input);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	8d e0       	ldi	r24, 0x0D	; 13
 35e:	0e 94 5d 00 	call	0xba	; 0xba <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Output);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	8e e0       	ldi	r24, 0x0E	; 14
 366:	0e 94 5d 00 	call	0xba	; 0xba <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Input);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	8f e0       	ldi	r24, 0x0F	; 15
 36e:	0e 94 5d 00 	call	0xba	; 0xba <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 0;
 372:	8d b1       	in	r24, 0x0d	; 13
 374:	8f 7e       	andi	r24, 0xEF	; 239
 376:	8d b9       	out	0x0d, r24	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
 378:	8d b1       	in	r24, 0x0d	; 13
 37a:	80 64       	ori	r24, 0x40	; 64
 37c:	8d b9       	out	0x0d, r24	; 13
		break;
	}
	SPI->SPCR_Reg.AllRegister |= (options->dataOrderMode<<5);
 37e:	2d b1       	in	r18, 0x0d	; 13
 380:	99 81       	ldd	r25, Y+1	; 0x01
 382:	30 e2       	ldi	r19, 0x20	; 32
 384:	93 9f       	mul	r25, r19
 386:	c0 01       	movw	r24, r0
 388:	11 24       	eor	r1, r1
 38a:	82 2b       	or	r24, r18
 38c:	8d b9       	out	0x0d, r24	; 13
	if (options->doubleSpeedMode == DoupleSpeedEnable)
 38e:	8b 81       	ldd	r24, Y+3	; 0x03
 390:	81 30       	cpi	r24, 0x01	; 1
 392:	41 f4       	brne	.+16     	; 0x3a4 <SPI_Init+0x90>
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 1;
 394:	8e b1       	in	r24, 0x0e	; 14
 396:	81 60       	ori	r24, 0x01	; 1
 398:	8e b9       	out	0x0e, r24	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
 39a:	9d b1       	in	r25, 0x0d	; 13
 39c:	8a 81       	ldd	r24, Y+2	; 0x02
 39e:	89 2b       	or	r24, r25
 3a0:	8d b9       	out	0x0d, r24	; 13
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <SPI_Init+0x9e>
	}
	else
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 0;
 3a4:	8e b1       	in	r24, 0x0e	; 14
 3a6:	8e 7f       	andi	r24, 0xFE	; 254
 3a8:	8e b9       	out	0x0e, r24	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
 3aa:	9d b1       	in	r25, 0x0d	; 13
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	89 2b       	or	r24, r25
 3b0:	8d b9       	out	0x0d, r24	; 13
	}
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <SPI_TxRx>:
u8 SPI_TxRx(u8 data){
	SPI->SPDR_Reg = data;
 3b8:	8f b9       	out	0x0f, r24	; 15
	while(SPI->SPSR_Reg.Bits.SPIF_Bit == 0);
 3ba:	77 9b       	sbis	0x0e, 7	; 14
 3bc:	fe cf       	rjmp	.-4      	; 0x3ba <SPI_TxRx+0x2>
	return SPI->SPDR_Reg;
 3be:	8f b1       	in	r24, 0x0f	; 15
}
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
